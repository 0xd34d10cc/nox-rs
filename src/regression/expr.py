import sys

def main():
   if len(sys.argv) < 3:
      print('Usage: expr.py test000.ml test000.log > test000.rs')
      return

   with open(sys.argv[1], 'rt') as tests_file, open(sys.argv[2], 'rt') as results_file:
      text = tests_file.read()
      text = text.replace('!? ', '') # Const constructor
      text = text.replace('! ', '')  # Var constructor

      results = results_file.read().split('\n')

      tests = text.split('eval')[1:] # ignore imports
      cases = []
      for (t, r) in zip(tests, results):
         state, expr = t.strip().split('\n')
         expr = expr.strip().replace('\"', '') # variable names
         expr = expr[:-1] # remove ;
         state = state.strip()[8:-4].split(';')
         state = [pair.replace('\"', '').split(',') for pair in state]
         state = { name.strip():int(value) for name, value in state}
         cases.append({
            'state': state,
            'expr': expr,
            'result': int(r)
         })

      print('// This file was generated by expr.py ')
      print('type Int = i64;')
      print('type Node = (); // FIXME')
      print('type Context = (); // FIXME\n')
      print('fn parse(input: &str) -> Node { unimplemented!() }')
      print('fn eval(node: Node, context: &Context) -> Int { unimplemented!() }')
      print('fn make_context(variables: &[(&str, Int)]) -> Context { unimplemented!() }\n')
      for i, case in enumerate(cases):
         print(f'#[test]')
         print(f'fn expr_{i}() {{')
         values = ','.join(f'(\"{name}\", {value})'
                           for name, value in case['state'].items())
         print(f'    let context = make_context(&[{values}][..]);')
         expr = case['expr']
         result = case['result']
         print(f'    assert_eq!(eval(parse(\"{expr}\"), &context), {result});')
         print(f'}}\n')


if __name__ == '__main__':
   main()